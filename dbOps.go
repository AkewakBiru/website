package main

import (
	"database/sql"
	"fmt"
	"time"

	"go.uber.org/zap"
)

type Article struct {
	Id          int
	Title       string
	Slug        string
	Content     string
	Date_posted time.Time
}

// query
//
// CREATE TABLE IF NOT EXISTS article (
//
//	id NUMBER GENERATED BY DEFAULT AS IDENTITY,
//	title VARCHAR(1000),
//	slug VARCHAR(5000),
//	content CLOB,
//	date_posted DATE,
//	PRIMARY KEY (id)
//
// );

func InsertRecord(db *sql.DB, article Article) error {
	query := "INSERT INTO article (title, slug, content, date_posted) VALUES (:1, :2, :3, :4)"
	res, err := db.Exec(query, article.Title, article.Slug, article.Content, article.Date_posted)
	if err != nil {
		return err
	}
	affectedRows, err := res.RowsAffected()
	if err != nil {
		return err
	}
	if affectedRows == 1 {

		logger.Info("DBLOG", zap.String("Event", "WRITE"), zap.String("QueryType", "INSERT"), zap.String("QueryString", query))
		return nil
	}
	return fmt.Errorf("no rows affected")
}

func GetNumRecords(db *sql.DB) (int, error) {
	query := "SELECT COUNT(*) AS total_rows FROM article"
	rows, err := db.Query(query)
	if err != nil {
		return 0, err
	}
	defer rows.Close()

	rowSize := 0
	if rows.Next() {
		if err := rows.Scan(&rowSize); err != nil {
			return 0, err
		}
		logger.Info("DBLOG", zap.String("Event", "READ"), zap.String("QueryType", "SELECT"), zap.String("QueryString", query))
		return rowSize, nil
	}
	return 0, fmt.Errorf("no record returned")
}

func GetNRecords(db *sql.DB, offset, size int) ([]Article, error) {
	var articles []Article = make([]Article, size)

	query := "SELECT * FROM article ORDER BY date_posted DESC OFFSET :1 ROWS FETCH NEXT :2 ROWS ONLY"
	rows, err := Db.Query(query, offset*size, size)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	idx := 0
	for rows.Next() {
		if err = rows.Scan(&articles[idx].Id, &articles[idx].Title, &articles[idx].Slug, &articles[idx].Content, &articles[idx].Date_posted); err != nil {
			return nil, err
		}
		if articles[idx].Id == 0 {
			break
		}
		idx++
	}
	logger.Info("DBLOG", zap.String("Event", "READ"), zap.String("QueryType", "SELECT"), zap.String("QueryString", query))
	return articles, nil
}

func GetRecord(db *sql.DB, id int) (*Article, error) {
	query := "SELECT * FROM article WHERE id = :1"
	rows, err := db.Query(query, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var article Article
	if rows.Next() {
		if err = rows.Scan(&article.Id, &article.Title, &article.Slug, &article.Content, &article.Date_posted); err != nil {
			return nil, err
		}
	} else {
		return nil, fmt.Errorf("no record found")
	}
	logger.Info("DBLOG", zap.String("Event", "READ"), zap.String("QueryType", "SELECT"), zap.String("QueryString", query))
	return &article, nil
}

func UpdateRecord(db *sql.DB, id int, column, value string) error {
	var query string
	switch column {
	case "title":
		query = "UPDATE article SET title = :1 WHERE id = :2"
	case "content":
		query = "UPDATE article SET content = :1 WHERE id = :2"
	}

	res, err := db.Exec(query, value, id)
	if err != nil {
		return err
	}
	affectedRows, err := res.RowsAffected()
	if err != nil {
		return err
	}
	if affectedRows == 1 {
		logger.Info("DBLOG", zap.String("Event", "WRITE"), zap.String("QueryType", "UPDATE"), zap.String("QueryString", query))
		return nil
	}
	return fmt.Errorf("no row affected")
}

func DeleteRecord(db *sql.DB, id int) error {
	query := "DELETE FROM article WHERE id = :1"
	res, err := db.Exec(query, id)
	if err != nil {
		return err
	}
	affectedRows, err := res.RowsAffected()
	if err != nil {
		return err
	}
	if affectedRows == 1 {
		logger.Info("DBLOG", zap.String("Event", "WRITE"), zap.String("QueryType", "DELETE"), zap.String("QueryString", query))
		return nil
	}
	return fmt.Errorf("no row affected: Record doesn't exist")
}
